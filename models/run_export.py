import os
from subprocess import Popen, PIPE
import re
import tempfile

local_dir = os.path.dirname(os.path.realpath(__file__))
blender_dir = os.path.expandvars("%programfiles%/Blender Foundation/Blender")

def call(args):
    proc = Popen(args, stdout=PIPE, stderr=PIPE)
    out, err = proc.communicate()
    exitcode = proc.returncode
    #
    return exitcode, out, err

# file_list = ['deathstar','junk2','tie','xwing','ywing','title','turret','trench1','vent','mfalcon','generator','tiex1']
# file_list = ['audi','audi_bbox','vtree']
file_list = ['205gti','205gti_bbox']
s = "{:02x}".format(len(file_list))
for blend_file in file_list:
    print("Exporting: {}.blend".format(blend_file))
    fd, path = tempfile.mkstemp()
    try:
        os.close(fd)
        exitcode, out, err = call([os.path.join(blender_dir,"blender.exe"),os.path.join(local_dir,blend_file + ".blend"),"--background","--python",os.path.join(local_dir,"blender_export_uv.py"),"--","--out",path])
        if err:
            raise Exception('Unable to loadt: {}. Exception: {}'.format(blend_file,err))
        print("exit: {} \n out:{}\n err: {}\n".format(exitcode,out,err))
        with open(path, 'r') as outfile:
            s = s + outfile.read()
    finally:
        os.remove(path)

# extra data
# slip angle curve 
s = s + "807f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7b7874716e6a6764605d5956534f4c4945423f3e3d3c3b3a3a3938373636353433323231302f2e2e2d2c2b2a2a29282726262524232221212121212121212121202020202020202020201f1f1f1f1f1f1f1f1f1f1e1e1e1e1e1e1e1e1e1e1e"
# slip ratio curve 
s = s + "807f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7e7e7d7d7c7c7b7b7a7a79797878777776767575747473737272717170706f6f6e6e6d6d6c6c6b6b6a6a69696868676766666565646463636262616160605f5f5f5c5a585654524f4d4b49474542403e3c3a383533312f2d2b28262422201e"
# track + actors
s = s + "890948f600881251870948ef00891251870948ee004a8f1251890948e500094a8f1251890948e40082094a84120a4a8f1251890948dd0083094a83125111098f1251890948dc004183094a8312090a86094a911251870948d6004183094a83125187094a911251870948d6004183094a8312518409014187094a911251830948d4004183094a831251830948080087094a911251830948d4004183094a8312518309000186004187094a8b1251830948d4004183094a83125183094887004187094a8b1251830948d4004183094a8312518309488d004187094a871251830948d2004183094a8312518309488d004187094a871251830948d2004183094a83125183094893004183094a871251830948d0004183094a83125183094893004183094a871251830948d0004183094a83125183094895004183094a871251830948ce004183094a83125183094895004183094a871251830948ce004183094a83125183094895004183094a871251830948ce004183094a83125183094895004183094a871251830948ce004183094a83125183094897004183094a871251830948cc004183094a83125183094897004183094a8712518309cd004183094a83125183094899004183094a8512518209ce004183094a83125183094898000883091186128209cf004183094a83125183094892000885091189128209d0004183094a83125183094890000885091189120a8209d1004183094a8312518309488a00088509118b120a8509d2004183094a8312518309488800088509118b120a850901d3004183094a8312518309488200088509118b120a850901d9004183094a831251830948088509118b120a850901db004183094a8312518409118b120a850901e10084094a8312518209118b120a850901e20085094a8c120a850901e600088509118b120a850901e200088509118d120a830901e600088509118e12518309e400088309118b120a82094a8512518209e4008309118b120a84094a8512510948e30082091187120a8509014183094a8512510948e200820987120a85090182004183094a8512510948e100820986120a090188004183094a8512510948e00041094a851251094889004183094a8512510948e00041094a851251094889004183094a8512510948e00041094a851282098a004183094a8512510948e00041094a841282098b004183094a8512510948e00082094a83125109488b004183094a8512510948df0083094a83125109488b004183094a8512510948de0041830984125109488b004183094a8512510948de0041820985125109488b004183094a8512510948de0041094a851282098c004183094a8512510948de0041094a841282098d004183094a8512510948de0082094a83125109488d004183094a8512510948dd0083094a83125109488d004183094a8512510948dc0041830984125109488d004183094a8512510948dc0041820985125109488d004183094a8512510948dc0041094a85128209488d004183094a8512510948dc0041094a84128309488d004183094a8512510948dc0082094a83125183098e004183094a8512510948db0083094a83125182098f004183094a8512510948da0041830984125109488e000884094a8512510948da0041820985125195094a8512518b0948d00041094a8512519409118612518b0948d00041094aab12519d0948b40082094aab12519d09b40083094ac512518209b4004183094ac512510948b400419f094a86120a84094a9d12510948b400419f094a85125185094a9d12510948d0004183094a8512518209014199094a8512510948d0004183094a8512510948080099094a8512510948d0004183094a851251090001980041094a8512510948d0004183094a8512510948990041094a8512820948d0004183094a8512510948990041094a8412830948d0004183094a8512510948990082094a8312518309d1004183094a8512510948980083094a8312518209d2004183094a851251094897004183098412510948d2004183094a851251094897004182098512510948d2004183094a8512510948970041094a8512510948d2004183094a8512510948970041094a8512510948d2004183094a8512510948970041094a8512820948d2004183094a8512510948970041094a8412830948d2004183094a8512510948970082094a8312518309d3004183094a8512510948960083094a8312518209d4004183094a8512510948950041830984128209d5004183094a8512510948950041820984128209d6004183094a85125109489500820984128209d7004183094a85125109489400820984128209d8004183094a8512510948930041094a8312510948d8004183094a8512510948930041094a8312510948d8004183094a85125109489300820984128209d9004183094a85125109489200820984128209da004183094a85125109489100820984128209db004183094a85125109489000820984128209dc004183094a85125109488f00820984128209dd004183094a85125109488e00820984128209de004183094a85125109488d00820984128209df004183094a85125109488c00820984128209e0004183094a85125109488b0041094a8312510948e0004183094a85125109488b0041094a8312510948e0004183094a85125109488b00820984128209e1004183094a85125109488a00820984128209e2004183094a85125109488900820984128209e3004183094a85125109488800820984128209e4004183094a85125109488700820984128209e5004183094a85125109488600820984128209e6004183094a8512510948850082098412820948e6004183094a8512510948840082098412830948e6004183094a8512510948830041094a8312518309e7004183094a8512510948830041094a8312518209e8004183094a85125109488300820984128209e9004183094a85125109488200820984128209ea004183094a851251094808820984128209eb004183094a851251840984128209ec004183094a851251830984128209ed004183094a851251820984128209ee004183094a851251118412510948ee004183094a8b125109ef004183094a8b1209f0004183094a8a1209f1004183094a891209f2004183094a881209f3004183094a871209f4004183094a861209f5004183094a851209f6004183094a841209f7004183094a82120a09fa0041850992000222022246837772850096000227827762850098006776408500980002228600a000a000a000a000a000a000a000a000a0009100024442208b009100478277648b008f000224837776208a008f00468577422089008e0002678577766489008e00028777762088008e000288774288008f00678777764087008f0006887772870090004787777687009000068877208600910067877760860091000244678577728600930004857762860002209200467774827762860026649200022200466640850004677720940002228600268277609c00268277729c00278277729c00068277769c00028277762093000222870067777620930046664086002782772092000267777286002782772092000267777686002677762092000283772085002682774293006777762085002782776640920027777642208400068377629200046682677684002783776293002246827760830027837762940027827774830047837760850022208d002783774082002783776484000466648d00068377628200278477208300268277408d006782776282002684776083002682777422208b0004827762820026847772830026837776648c004666408200248477628300048577428b000222830000478377628400478577608f00000466776640840004668477768f008200832286002224678377208e008d00278377208e008d00268377408e008d00268377648e008d0026837776208d008d0004668377422000022289008e0022468377760267664088008f000687777488008f00028877622086008f00026788777686009000466788776085009000022267827667847772850008200c150600013e3f3a2a33211220091400"

# pico-8 map format
# first 4096 bytes -> gfx (shared w/ map)
# second 4096 bytes -> map
if len(s)>=2*8192:
    raise Exception('Data string too long ({})'.format(len(s)))

tmp=s[:8192]
print("__gfx__")
# swap bytes
gfx_data = ""
for i in range(0,len(tmp),2):
    gfx_data = gfx_data + tmp[i+1:i+2] + tmp[i:i+1]
print(re.sub("(.{128})", "\\1\n", gfx_data, 0, re.DOTALL))

map_data=s[8192:]
if len(map_data)>0:
    print("__map__")
    print(re.sub("(.{256})", "\\1\n", map_data, 0, re.DOTALL))

